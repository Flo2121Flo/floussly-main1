Review and fix all code across my entire app — frontend, backend, UI, and UX.

Here are the requirements:

General Code Improvements:
	•	Detect and fix any syntax errors, bad practices, or inefficient code patterns.
	•	Standardize code formatting (consistent indentation, variable naming, comments).
	•	Refactor duplicated code into reusable components or services.
	•	Make sure frontend and backend files follow clean architecture principles.

Frontend (Flutter):
	•	Fix any UI glitches (alignment, padding, responsiveness on all screen sizes).
	•	Improve UX (loading states, error handling, confirmation modals where needed).
	•	Ensure all text elements, icons, and buttons are properly aligned, readable, and follow Material Design best practices.
	•	Optimize animations and transitions for smoother user experience.

Backend (Node.js):
	•	Check all API endpoints for errors, performance issues, and security vulnerabilities.
	•	Add missing validation for user inputs (e.g., sanitize all incoming data).
	•	Make sure all API responses are consistent (use standard success/error response format).
	•	Ensure database queries are optimized and protected against injection attacks.

Security:
	•	Review and fix authentication and authorization flows (AWS Cognito).
	•	Ensure all sensitive data (user info, payment data) is properly encrypted in transit and at rest.
	•	Protect against common vulnerabilities (OWASP Top 10: SQL Injection, XSS, CSRF, etc.).

Performance:
	•	Optimize API response times and app loading speed.
	•	Identify and reduce unnecessary API calls, re-renders, or data fetches.
	•	Compress assets (images, icons) where needed.

Testing:
	•	Add basic unit tests and integration tests if missing.
	•	Make sure the app is stable under typical user behaviors.

Languages and Multilingual:
	•	Check if the multilingual features (Arabic, French, English, Amazigh) are properly implemented.
	•	Ensure text direction (RTL for Arabic) is handled correctly.

Summary:
	•	Fix all visible and hidden problems even if I didn’t explicitly mention them.
	•	Deliver clean, optimized, production-ready code without changing the main logic or features.